<?php 

define('SHANTI_ESSAYS_PATH',drupal_get_path('module','shanti_essays'));
define('SHANTI_ESSAYS_Q', $GLOBALS['_GET']['q']);

function shanti_essays_menu() {
  return array(
    'shanti_essays/whole/%' => array(
      'page callback' => 'shanti_essays_whole',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      //'delivery callback' => 'shanti_essays_content_callback',
      'access arguments' => array('access content'),
    ),
    'node/%node/book_toc' => array(
      'title' => 'Contents',
      'page callback' => 'shanti_essays_show_toc',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('access content'),
      'weight' => 2,
    ),
    'shanti_essays/test' => array(
      'title' => 'SHANTI Essays Test Page',
      'page callback' => 'shanti_essays_test',
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access content'), 
    ),
  );
}

function shanti_essays_test() {
  return "This is a test.";
}

// Need to learn more about how to customize this before using
function shanti_essays_content_callback($page_callback_result) {
  drupal_page_header();
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    print $page_callback_result;
  }
  drupal_page_footer();
}

/**
 * The function creates a single page out of all the nodes that compose a
 * book. It also generates a table of contents and then passes these to
 * two templates, very much as the default book print function works.
 */
function shanti_essays_whole($nid) {
  $node = node_load($nid);
  if (!$node) {
    return MENU_NOT_FOUND;
  }
  if (!node_access('view', $node)) {
    return MENU_ACCESS_DENIED;
  }
  if (user_access('access content')) {
    if (isset($node->book)) {
      $tree         = book_menu_subtree_data($node->book);
      $contents     = book_export_traverse($tree, 'shanti_essays_whole_node');            
      $toc_block    = book_export_traverse($tree, 'shanti_essays_whole_toc');
      $book_id      = $node->book['bid'];
      return theme('shanti_essays_whole_html', array('title' => $node->title, 'book_id' => $book_id, 'contents' => $contents, 'toc_block' => $toc_block, 'depth' => $node->book['depth']));
    } 
    else {
      drupal_not_found();
    }
  } 
  else {
    drupal_access_denied();
  }
}

/**
 * This exists to conform to the model of how the book print function works.
 * Not sure if it is necceary to specify a new view mode but what the heck.
 */
function shanti_essays_entity_info_alter(&$info) {
  $info['node']['view modes'] += array(
    'whole' => array(
      'label' => t('Whole'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * I believe this is where you need to intervene in order to make changes to how
 * node content, specifically each field, is to be rendered in the Reader.
 */
function shanti_essays_whole_node($node, $children = '') {
  $build = node_view($node, 'whole'); 
  unset($build['#theme']); 
  hide($build['group_content_access']);
  hide($build['links']);
  $node->rendered = drupal_render($build);
  return theme('shanti_essays_whole_node_html', array('node' => $node, 'children' => $children));
}

/**
 * Generates a table of contents for use one the Whole page. Seemed
 * more efficient to roll your own here, but I am open to working 
 * with an existing render array to do this. Or something.
 */
function shanti_essays_whole_toc($node, $children = '') {
    $output = '';
    $nid = $node->nid;
    $title = check_plain($node->title);
    $depth = $node->book['depth'];
    $prev = book_prev($node->book);
    if (isset($prev)) {
      $x = $depth - $prev['depth'];
      if ($x > 0) $output .= "<ul class='level-{$prev['depth']}'>\n"; // $x should never be > 1
      elseif ($x < 0) {
        for ($i = 0; $i > $x; $i--) {
          $output .= "</ul>\n"; 
        }
      }
    }
    $output .= "<li><a href='#node-$nid'>$title</a></li>\n";
    $output .= $children;
    return $output;
}

function template_preprocess_shanti_essays_whole_html(&$vars) {
  drupal_add_css(SHANTI_ESSAYS_PATH . '/css/shanti_essays_whole.css');
  $js_settings = array('base_path' => SHANTI_ESSAYS_PATH);
  drupal_add_js(array('shantiEssays' => $js_settings), 'setting');
  drupal_add_js(SHANTI_ESSAYS_PATH . '/js/shanti_essays_whole.js', 'file');
  drupal_add_js(SHANTI_ESSAYS_PATH . '/js/jquery.transit.min.js', 'file');
  drupal_add_js(SHANTI_ESSAYS_PATH . '/js/jquery.inview.min.js', 'file');
}

function template_preprocess_shanti_essays_whole_node_html (&$vars) {
  $vars['depth']    = $vars['node']->book['depth'];
  $vars['title']    = check_plain($vars['node']->title);
  $vars['content']  = $vars['node']->rendered;
}

function shanti_essays_help($path, $arg) {
  if ($path == "admin/help#shanti_essays") {
    return '<p>' . t('SHANTI Essays, my friend.') . '</p>';
  }
}

function shanti_essays_filter_info() {
  $filters = array();
  $filters['shanti_essays_pullquote'] = array(
    'title'             => t('Pull Quotes'),
    'description'       => t('Makes a copy of the selection and puts it into a pull quote.'),
    'process callback'  => '_shanti_essays_pullquote_filter_process',
    'tips callback'     => '_shanti_essays_pullquote_filter_tips',
  );
  return $filters;
}

function _shanti_essays_pullquote_filter_process($text, $filter, $format) {
  $text = preg_replace("/\[pqr\](.*)\[\/pqr\]/m","$1<span class='shanti-essays-pullquote-right'>$1</span>",$text);
  $text = preg_replace("/\[pql\](.*)\[\/pql\]/m","$1<span class='shanti-essays-pullquote-left'>$1</span>",$text);
  $text_lines = explode("<",$text);
  for ($i = 0; $i < count($text_lines); $i++) {
    if (preg_match("/^h([1-7])/",$text_lines[$i],$matches)) {
      $text_lines[$i] = "<a id='h1_{$i}'></a><".$text_lines[$i]; 
    } 
    elseif ($i > 0) {
      $text_lines[$i] = "<".$text_lines[$i];
    }
  }
  $text = implode('',$text_lines);
  return $text;
}

function _shanti_essays_pullquote_filter_tips($filter, $format, $long = FALSE) {
  $text = '<em>[pqr]...[/pqr]</em> produces a right-side pull quote from the text. ';
  $text .= '<em>[pql]...[/pql]</em> produces a left-side pull quote from the text. ';
  return t($text);
}

// This may need to change to use hook_theme_registry_alter instead
// (which is only executed when the theme cache is re-built)
function shanti_essays_theme($existing, $type, $theme, $path) {
  return array(
    'node__book' => array(
      'render element' => 'node',
      'template' => 'templates/node--book',
      'path' => SHANTI_ESSAYS_PATH,
    ),
    'book_navigation' => array(
      'render element' => 'book',
      'template' => 'templates/book-navigation',
      'path' => SHANTI_ESSAYS_PATH,
    ),
    'page__node__book' => array(
      'render element' => 'page',
      'template' => 'templates/page--node',
      'path' => SHANTI_ESSAYS_PATH,
    ),
    'html__book' => array(
      'render element' => 'page',
      'template' => 'templates/html--book',
      'path' => SHANTI_ESSAYS_PATH,
    ),
    'shanti_essays_whole_html' => array(
      ' variables' => array('title' => NULL, 'contents' => NULL, 'depth' => NULL),
      'template' => 'templates/shanti-essays-whole-html',
      'path' => SHANTI_ESSAYS_PATH,
    ),
    'shanti_essays_whole_node_html' => array(
      'variables' => array('node' => NULL, 'children' => NULL),
      'template' => 'templates/shanti-essays-whole-node-html',
      'path' => SHANTI_ESSAYS_PATH,
    ),
  );
}

/*
function shanti_essays_menu_alter(&$items) {}
function shanti_essays_page_alter(&$page) {}
function shanti_essays_page_build(&$page) {} 
function shanti_essays_page_node_view_alter(&$build) {}
function shanti_essays_preprocess_html(&$vars) {}
function shanti_essays_preprocess_page(&$vars) {}
function shanti_essays_preprocess_book_navigation(&$vars) {} 
function shanti_essays_preprocess_region(&$vars) {}
*/

function shanti_essays_css_alter (&$css) {
  if (preg_match("/^shanti_essays\/whole/", $GLOBALS['_GET']['q'])) {
    global $theme_key;
    foreach ($css as $k => $v) {
      if (preg_match("/$theme_key/",$k)) {
        unset($css[$k]);
      }
    }
  }
}

function shanti_essays_preprocess_html(&$vars) {
  if (preg_match("/^shanti_essays\/whole/", SHANTI_ESSAYS_Q)) {
    $vars['theme_hook_suggestions'][] = 'html__book';
  }
}

function shanti_essays_preprocess_page(&$vars, $hook) {
  if (preg_match("/^shanti_essays\/whole/", SHANTI_ESSAYS_Q)) {
    $vars['theme_hook_suggestions'][] = 'page__node__book';
  }
}

function shanti_essays_preprocess_node(&$vars) {
    
  if ($vars['type'] == 'book') {
        
    $nid      = $vars['nid'];
    $bid      = $vars['book']['bid'];
    $top_mlid = $vars['book']['p1'];
            
    if (user_access('add content to books')) {
      // Fix BMS link
      if(isset($vars['content']['links'][0]['#links']['book_made_simple_book'])) {
        $vars['content']['links']['book']['#links']['book_made_simple_book'] = $vars['content']['links'][0]['#links']['book_made_simple_book'];
        $vars['content']['links']['book']['#links']['book_made_simple_book']['title'] = 'Add Essay page below this page';
        unset($vars['content']['links'][0]);      
      }
      // Add another link to add a page to the top          
      $vars['content']['links']['book']['#links']['shanti_essays_add_page_top'] = array(
        'title'       => 'Add Essay page below top page',
        'href'        => 'node/add/book',
        'query'       => array('parent' => $top_mlid),
        'attributes'  => array('title' => 'Add Essay page below <em>top</em> page')
      );
      $vars['content']['links']['book']['#links']['shanti_essays_view_whole'] = array(
        'title'       => 'View in Reader',
        'href'        => "shanti_essays/whole/$nid",
        'attributes'  => array('title' => 'View in experimental Reader')
      );
      // And modify the existing one
      if ($bid == $nid) {
        unset($vars['content']['links']['book']['#links']['book_made_simple_book']);
        $vars['content']['links']['book']['#links']['shanti_essays_add_page_top']['title'] = "Add Essay page";
      }
    }    
    
    // What the hell is all this for?
    $book_node = node_load($bid);   
    $book_menu_name = book_menu_name($bid);
    $book_links = menu_load_links($book_menu_name);
    $vars['shanti_essays']['top_mlid']   = $top_mlid;
    $vars['shanti_essays']['book_title'] = $book_node->title;
    $vars['shanti_essays']['book_url']   = drupal_get_path_alias('/node/' . $bid);
    
    // Add CSS and JS
    drupal_add_css(SHANTI_ESSAYS_PATH . '/css/shanti_essays.css');
    $js_settings = array(
      'book' => $vars['book'],
      'book_title' => $vars['shanti_essays']['book_title'],
    );
    drupal_add_js(array('shantiEssays' => $js_settings), 'setting');
    drupal_add_js(SHANTI_ESSAYS_PATH . '/js/shanti_essays.js', 'file');
       
  }
}

function shanti_essays_enable() {
  drupal_set_message($message = t('SHANTI Essays activated.'), $type = 'status');
  drupal_theme_rebuild();
}

function shanti_essays_show_toc($node) {
  $output = shanti_essays_get_toc($node);
  return drupal_render($output);
}

function shanti_essays_get_toc($node) {
  $output = array();
  if ($node->type == 'book') {
    $bid    = $node->book['bid'];
    $toc    = book_toc($bid, 7);
    $tree   = menu_tree_all_data(book_menu_name($bid));
    $output = menu_tree_output($tree);
  } 
  return $output;  
}
